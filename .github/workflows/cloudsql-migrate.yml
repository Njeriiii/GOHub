name: Database Migrations

on:
  workflow_dispatch:
  push:
    branches:
      - deployment
    paths:
      - 'Backend/migrations/**'
      - 'Backend/models/**'
      - '.github/workflows/cloudsql-migrate.yml'

jobs:
  migrate:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'Backend/requirements.dev.txt'

      - name: Setup GCP Credentials
        run: |
          echo '${{ secrets.GCP_SA_KEY }}' > gcp-credentials.json
          chmod 600 gcp-credentials.json

      - name: Install and start Cloud SQL Proxy v2
        run: |
          # Download and setup Cloud SQL Proxy
          curl -o cloud-sql-proxy https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.8.1/cloud-sql-proxy.linux.amd64
          chmod +x cloud-sql-proxy
          
          # Start proxy with structured logging
          ./cloud-sql-proxy \
            --credentials-file=gcp-credentials.json \
            --address 0.0.0.0 \
            --port 5432 \
            --structured-logs \
            gohub-92b6b:us-west1:ngo-connect-db > proxy.log 2>&1 &
          
          # Wait for proxy to start and verify
          sleep 10
          if ! netstat -tlpn | grep :5432 > /dev/null; then
            echo "Error: Cloud SQL Proxy failed to start"
            cat proxy.log
            exit 1
          fi
          echo "Cloud SQL Proxy started successfully"

      - name: Install dependencies
        working-directory: Backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.dev.txt

      - name: Create required directories
        working-directory: Backend
        run: |
          mkdir -p migrations/versions
          mkdir -p uploads

      - name: Setup environment variables
        working-directory: Backend
        run: |
          # Create .env file with all required variables
          cat << EOF > .env
          FLASK_APP=app:create_app()
          FLASK_ENV=production
          K_SERVICE=cloud-run
          USE_CLOUD_SQL_PROXY=true
          DATABASE_URL=postgresql://postgres:${{ secrets.DB_PASSWORD }}@127.0.0.1:5432/ngo_connect
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          GOOGLE_APPLICATION_CREDENTIALS=${{ github.workspace }}/gcp-credentials.json
          GOOGLE_CLOUD_PROJECT=gohub-92b6b
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
          UPLOAD_FOLDER=${{ github.workspace }}/Backend/uploads
          EOF
          
          # Export for immediate use
          export $(cat .env | xargs)
          export PYTHONPATH="${PWD}:${PYTHONPATH}"

      - name: Verify database connection
        working-directory: Backend
        run: |
          python << EOF
          import psycopg2
          import sys
          import logging
          
          logging.basicConfig(level=logging.INFO)
          logger = logging.getLogger()
          
          try:
              logger.info("Testing database connection...")
              conn = psycopg2.connect(
                  dbname='ngo_connect',
                  user='postgres',
                  password='${{ secrets.DB_PASSWORD }}',
                  host='127.0.0.1',
                  port='5432'
              )
              with conn.cursor() as cur:
                  cur.execute('SELECT version();')
                  version = cur.fetchone()
                  logger.info(f"Connected to PostgreSQL: {version[0]}")
              conn.close()
          except Exception as e:
              logger.error(f"Database connection failed: {e}")
              sys.exit(1)
          EOF

      - name: Run Database Migrations
        working-directory: Backend
        run: |
          echo "Current directory: $(pwd)"
          echo "Starting migrations..."
          python manage_db.py

      - name: Store migration logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: migration-logs
          path: |
            Backend/migration.log
            proxy.log
          retention-days: 7

      - name: Stop Cloud SQL Proxy
        if: always()
        run: |
          pkill cloud-sql-proxy || true

      - name: Cleanup
        if: always()
        run: |
          rm -f gcp-credentials.json
          rm -f Backend/.env